/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/models/66bc452579bf32ac3f6c266b.glb -o src/components/Avater.jsx 
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useFrame, useGraph, useLoader } from "@react-three/fiber";
import { useAnimations, useCursor, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useControls } from "leva";
import * as THREE from "three";
import { useLoadAnimations } from "./hooks/useLoadAnimations";
import { useLoadAudios } from "./hooks/useLoadAudios";

const corresponding = {
    A: "viseme_PP",
    B: "viseme_kk",
    C: "viseme_I",
    D: "viseme_AA",
    E: "viseme_O",
    F: "viseme_U",
    G: "viseme_FF",
    H: "viseme_TH",
    X: "viseme_PP",
};

export function Avatar(props) {
    const {
        playAudio,
        script,
        headFollow,
        smoothMorphTarget,
        morphTargetSmoothing,
        custionAction,
        action: playAction,
    } = useControls({
        playAudio: false,
        headFollow: true,
        smoothMorphTarget: true,
        morphTargetSmoothing: 0.5,
        script: {
            value: "welcome",
            options: ["welcome", "touch1"],
        },
        custionAction: false,
        action: {
            value: "Idle",
            options: [
                "Idle",
                "Greeting",
                "Angry",
                "Sad Idle",
                "Happy Idle",
                "Wave Dance",
                "Robot Dance",
                "Locking Dance",
                "Rumba Dance",
            ],
        },
    });

    const { setAudio, audio, lipsync } = useLoadAudios();

    const [pointerOver, setPointerOver] = useState(false);
    useCursor(pointerOver);

    useFrame(() => {
        if (!audio) return;

        const currentAudioTime = audio.currentTime;

        if (currentAudioTime !== 0) {
            Object.values(corresponding).forEach((value) => {
                if (!smoothMorphTarget) {
                    nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[value]] = 0;
                    nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[value]] = 0;
                } else {
                    nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[value]] =
                        THREE.MathUtils.lerp(
                            nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[value]],
                            0,
                            morphTargetSmoothing,
                        );

                    nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[value]] =
                        THREE.MathUtils.lerp(
                            nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[value]],
                            0,
                            morphTargetSmoothing,
                        );
                }
            });

            // if (audio.ended) {
            //     audio.currentTime = 1;
            //     setTimeout(() => {
            //         audio.currentTime = 0;
            //     }, 100);
            // }
        }
        if (audio.paused || audio.ended) {
            if (!custionAction) {
                setAnimation("Idle");
            }
            return;
        }

        for (let i = 0; i < lipsync.mouthCues.length; i++) {
            const mouthCue = lipsync.mouthCues[i];
            if (currentAudioTime >= mouthCue.start && currentAudioTime <= mouthCue.end) {
                if (!smoothMorphTarget) {
                    nodes.Wolf3D_Head.morphTargetInfluences[
                        nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]
                    ] = 1;
                    nodes.Wolf3D_Teeth.morphTargetInfluences[
                        nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]
                    ] = 1;
                } else {
                    nodes.Wolf3D_Head.morphTargetInfluences[
                        nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]
                    ] = THREE.MathUtils.lerp(
                        nodes.Wolf3D_Head.morphTargetInfluences[
                            nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]
                        ],
                        1,
                        morphTargetSmoothing,
                    );
                    nodes.Wolf3D_Teeth.morphTargetInfluences[
                        nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]
                    ] = THREE.MathUtils.lerp(
                        nodes.Wolf3D_Teeth.morphTargetInfluences[
                            nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]
                        ],
                        1,
                        morphTargetSmoothing,
                    );
                }
                break;
            }
        }
    });

    const { scene } = useGLTF("models/66bc452579bf32ac3f6c266b.glb");
    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes, materials } = useGraph(clone);

    const group = useRef();
    const { animation, setAnimation } = useLoadAnimations(group);

    useEffect(() => {
        if (playAudio) {
            audio?.play();
        } else {
            audio?.pause();
        }
        if (animation != "Idle") {
            setAnimation("Idle", true, true);
        }
    }, [playAudio]);

    useEffect(() => {
        if (playAudio) {
            setAudio(script, true);
        }
    }, [script]);

    useEffect(() => {
        if (custionAction) {
            setAnimation(playAction);
        }
    }, [playAction, custionAction]);

    // CODE ADDED AFTER THE TUTORIAL (but learnt in the portfolio tutorial ♥️)
    useFrame((state) => {
        if (headFollow) {
            group.current.getObjectByName("Head").lookAt(state.camera.position);
        }
    });

    return (
        <group
            {...props}
            dispose={null}
            ref={group}
            onPointerEnter={() => setPointerOver(true)}
            onPointerLeave={() => setPointerOver(false)}
            onClick={() => {
                setAudio("touch1");
                setAnimation("Angry Point", false);
            }}
        >
            <primitive object={nodes.Hips} />
            <skinnedMesh
                geometry={nodes.Wolf3D_Hair.geometry}
                material={materials.Wolf3D_Hair}
                skeleton={nodes.Wolf3D_Hair.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Glasses.geometry}
                material={materials.Wolf3D_Glasses}
                skeleton={nodes.Wolf3D_Glasses.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Top.geometry}
                material={materials.Wolf3D_Outfit_Top}
                skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                material={materials.Wolf3D_Outfit_Bottom}
                skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                material={materials.Wolf3D_Outfit_Footwear}
                skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Body.geometry}
                material={materials.Wolf3D_Body}
                skeleton={nodes.Wolf3D_Body.skeleton}
            />
            <skinnedMesh
                name="EyeLeft"
                geometry={nodes.EyeLeft.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeLeft.skeleton}
                morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
            />
            <skinnedMesh
                name="EyeRight"
                geometry={nodes.EyeRight.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeRight.skeleton}
                morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Head"
                geometry={nodes.Wolf3D_Head.geometry}
                material={materials.Wolf3D_Skin}
                skeleton={nodes.Wolf3D_Head.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Teeth"
                geometry={nodes.Wolf3D_Teeth.geometry}
                material={materials.Wolf3D_Teeth}
                skeleton={nodes.Wolf3D_Teeth.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
            />
        </group>
    );
}
