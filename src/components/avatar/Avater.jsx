/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/models/66bc452579bf32ac3f6c266b.glb -o src/components/Avater.jsx 
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useFrame, useGraph, useLoader } from "@react-three/fiber";
import { useAnimations, useCursor, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { button, useControls } from "leva";
import * as THREE from "three";
import { useLoadAnimations } from "./hooks/useLoadAnimations";
import { useVoice } from "./hooks/useVoice";
import { useBlinkEye } from "./hooks/useBlinkEye";
import { useFacialExpressions } from "./hooks/useFacialExpressions";
import { getRandomNumber } from "./utils";
import { useChat } from "@/hooks/useChat";

const corresponding = {
    A: "viseme_PP",
    B: "viseme_kk",
    C: "viseme_I",
    D: "viseme_AA",
    E: "viseme_O",
    F: "viseme_U",
    G: "viseme_FF",
    H: "viseme_TH",
    X: "viseme_PP",
};

export function Avatar(props) {
    const {
        headFollow,
        custionAction,
        action: playAction,
    } = useControls({
        headFollow: true,
        custionAction: false,
        action: {
            value: "Idle",
            options: [
                "Idle",
                "Greeting",
                "Angry",
                "Sad Idle",
                "Happy Idle",
                "Wave Dance",
                "Robot Dance",
                "Locking Dance",
                "Rumba Dance",
            ],
        },
    });

    const { scene } = useGLTF("models/66bc452579bf32ac3f6c266b.glb");
    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes, materials } = useGraph(clone);

    const { message, onMessagePlayed, chat } = useChat();

    // FacialExpressions
    const { facialExpression, setFacialExpression } = useFacialExpressions(clone);

    const group = useRef();
    const { animation, setAnimation } = useLoadAnimations(group);

    const { setAudio, audio, lipsync, audioKey, setAudioByOriginalAudio } = useVoice(clone, () => {
        setFacialExpression("");
        setAnimation();
        onMessagePlayed();
    });
    const [pointerOver, setPointerOver] = useState(false);
    useCursor(pointerOver);

    useEffect(() => {
        if (custionAction) {
            setAnimation(playAction);
        }
    }, [playAction, custionAction]);

    // CODE ADDED AFTER THE TUTORIAL (but learnt in the portfolio tutorial ♥️)
    useFrame((state) => {
        if (headFollow) {
            group.current.getObjectByName("Head").lookAt(state.camera.position);
        }
    });

    // Eyes control
    useBlinkEye(clone);

    // Start Welcome
    useEffect(() => {
        if (true) return;
        setTimeout(() => {
            setAudio("welcome");
            setAnimation("Greeting");
            setFacialExpression("smile");
        }, 2000);
    }, []);

    // Chat
    useEffect(() => {
        if (!message) return;
        console.log(message);
        const audio = new Audio("data:audio/mp3;base64," + message.audio);
        setAudioByOriginalAudio(audio, message.lipsync);
        setAnimation(message.animation);
        setFacialExpression(message.facialExpression);
    }, [message]);

    useControls("Chat", {
        chat: button(() => chat()),
    });

    const firstTouch = useRef(true);
    return (
        <group
            {...props}
            dispose={null}
            ref={group}
            onPointerEnter={() => setPointerOver(true)}
            onPointerLeave={() => setPointerOver(false)}
            onClick={() => {
                if (audioKey && audioKey.startsWith("touch")) return;
                if (firstTouch.current) {
                    firstTouch.current = false;
                    setAudio("touch1", true);
                } else {
                    const random = getRandomNumber(2, 3);
                    setAudio(`touch${random}`, true);
                }
                setAnimation("Angry Point", false);
                setFacialExpression("angry");
            }}
        >
            <primitive object={nodes.Hips} />
            <skinnedMesh
                name="EyeLeft"
                geometry={nodes.EyeLeft.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeLeft.skeleton}
                morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
            />
            <skinnedMesh
                name="EyeRight"
                geometry={nodes.EyeRight.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeRight.skeleton}
                morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Head"
                geometry={nodes.Wolf3D_Head.geometry}
                material={materials.Wolf3D_Skin}
                skeleton={nodes.Wolf3D_Head.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Teeth"
                geometry={nodes.Wolf3D_Teeth.geometry}
                material={materials.Wolf3D_Teeth}
                skeleton={nodes.Wolf3D_Teeth.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Hair.geometry}
                material={materials.Wolf3D_Hair}
                skeleton={nodes.Wolf3D_Hair.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Glasses.geometry}
                material={materials.Wolf3D_Glasses}
                skeleton={nodes.Wolf3D_Glasses.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Top.geometry}
                material={materials.Wolf3D_Outfit_Top}
                skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                material={materials.Wolf3D_Outfit_Bottom}
                skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                material={materials.Wolf3D_Outfit_Footwear}
                skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Body.geometry}
                material={materials.Wolf3D_Body}
                skeleton={nodes.Wolf3D_Body.skeleton}
            />
        </group>
    );
}

useGLTF.preload("models/66bc452579bf32ac3f6c266b.glb");
